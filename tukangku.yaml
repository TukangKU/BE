openapi: 3.0.0
info:
  description: |
    This is a sample Petstore server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: "1.0.0"
  title: Swagger Petstore
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MHAFIDZHIDAYAT_1/aaaa/1.0.0
  - url: 'https://petstore.swagger.io/v2'
tags:
  - name: auth
    description: Operations for authentication and registration
  - name: worker
    description: Operations about worker
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /register/worker:
    post:
      tags:
        - auth
      summary: Register worker into the system
      operationId: registerWorker
      requestBody:
        description: Data needed for the operation
        content:
          application/json:
            schema:
                type: object
                properties:
                  username:
                   type: string
                   example: joko999
                  email:
                   type: string
                   example: joko.binangun@gmail.com
                  password:
                   type: string
                   example: joko1212
      responses:
        '201':
          description: registration success
          content:
            application/json:
              schema:
                type: object
                properties:
                    message:
                      type: string

        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Blank input is not allowed!"
 
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Incorrect username/email or password"
        '409':
          description: conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Email has been used. Please login!"       
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example: "Internal server error" 
        '503':
          description: service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example: "Service is unavailable at the moment. Please try again later"    
  /login/worker:
    post:
      tags:
        - auth
      summary: Logs worker into the system
      operationId: loginWorker
      requestBody:
        description: Data needed for the operation
        content:
          application/json:
            schema:
                type: object
                properties:
                    email:
                      type: string
                      example: joko.binangun@gmail.com
                    password:
                      type: string
                      example: joko1212
      responses:
        '201':
          description: login success
          content:
            application/json:
              schema:
                type: object
                properties:
                    message:
                      type: string
                      example: "Login success! Welcome, Joko!"
                    data: 
                      $ref: '#/components/schemas/WorkerLogin'

        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Blank input is not allowed!"
                  data:  
                    type: object
                    example:    
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Incorrect email or password"
                  data:  
                    type: object
                    example:   
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Email isn't registered"
                  data:  
                    type: object
                    example:   
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example: "Internal server error" 
                  data:  
                    type: object
                    example:                   
        '503':
          description: service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example: "Service is unavailable at the moment. Please try again later"    
                  data:  
                    type: object
                    example:    
  /workers/{category}:
    get:
      tags:
        - worker
      summary: Get workers by category. Try Plumber
      description: This can only be done by the logged in user.
      operationId: getWorkersByCategory
      parameters:
        - name: category
          in: path
          description: 'Job category for available workers. '
          required: true
          schema:
            type: string
      security:
          - tukangku_auth:
              - read:worker
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                    properties:
                      message:
                        type: string
                        example: success
                      data:
                        allOf:
                          - $ref: "#/components/schemas/PaginatedResultWorker"
                          - type: object
                            $ref: '#/components/schemas/Workers'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Blank parameter is not allowed!"
                  data:  
                    type: object
                    example:    
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Please login first!"
                  data:  
                    type: object
                    example:   
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Workers not found!"
                  data:  
                    type: object
                    example:   
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example: "Internal server error" 
                  data:  
                    type: object
                    example:                   
        '503':
          description: service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example: "Service is unavailable at the moment. Please try again later"    
                  data:  
                    type: object
                    example:
  /workers/{id}:
    get:
      tags:
        - worker
      summary: Get worker by id
      description: This can only be done by the logged in user.
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: 'The id that needs to be fetched. Use 1 for testing. '
          required: true
          schema:
            type: integer
      security:
          - tukangku_auth:
              - read:worker
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: success
                  data:
                    type: object
                    $ref: '#/components/schemas/WorkerGetOne'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Blank parameter is not allowed!"
                  data:  
                    type: object
                    example:    
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Please login first!"
                  data:  
                    type: object
                    example:   
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Worker not found!"
                  data:  
                    type: object
                    example:   
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example: "Internal server error" 
                  data:  
                    type: object
                    example:                   
        '503':
          description: service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example: "Service is unavailable at the moment. Please try again later"    
                  data:  
                    type: object
                    example:
    put:
      tags:
        - worker
      summary: Update worker profile
      description: This can only be done by the logged in worker.
      operationId: updateWorker
      security:
        - tukangku_auth:
          - write:worker
          - read:worker
      parameters:
        - name: id
          in: path
          description: id of worker that need to be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent user in the store
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                username:
                  type: string
                  example: joko999
                nama:
                  type: string
                  example: Joko Waluyo
                skills:
                  type: array
                  items:
                    type: string
                    example: ["Service AC","Plumber","Decoration"]
                email:
                 type: string
                 example: joko.binangun@gmail.com
                adress:
                  type: string
                  example: Jl. Merdeka No.12
                picture:
                  type: string
                  format: binary
                  description: worker picture
      responses:  
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The message to be displayed.
                    example: "Profil berhasil diubah."
                  data:
                    $ref: '#/components/schemas/WorkerUpdate'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Blank input is not allowed!"
                  data:  
                    type: object
                    example:    
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Please login first!"
                  data:  
                    type: object
                    example:   
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Worker not found!"
                  data:  
                    type: object
                    example:   
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example: "Internal server error" 
                  data:  
                    type: object
                    example:                   
        '503':
          description: service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example: "Service is unavailable at the moment. Please try again later"    
                  data:  
                    type: object
                    example:
    delete:
      tags:
        - worker
      summary: Delete worker profile
      description: This can only be done by the logged in worker.
      operationId: updateWorker
      parameters:
        - name: id
          in: path
          description: id of worker that need to be deleted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Worker successfully deleted."
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Blank parameter is not allowed!"  
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Please login first!"
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example:  "Worker not found!"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example: "Internal server error"                   
        '503':
          description: service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                   type: string
                   example: "Service is unavailable at the moment. Please try again later"    



 
components:
  schemas:
    WorkerLogin:
     type: object
     properties:
       id:
        type: integer
        example: 1
       username:
        type: string
        example: joko999
       password: 
        type: string
        example: joko1212
       token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDE2MDU5OTgzNTMsImlhdCI6MTcwMTYwNTk5ODM1MiwiaWQiOjF9.vFsLrkcLzwzGQwmGTDnD0bNeDxyrI-6ouUgMYDtsomA 
     xml:
      name: WorkerLogin
      ##
    WorkerUpdate:     
     type: object
     properties:
      id:
       type: integer
       example: 1
      username:
       type: string
       example: joko999
      nama:
        type: string
        example: Joko Waluyo
      skills:
        type: array
        items:
            type: string
            example: ["Service AC","Plumber","Decoration"]
      email:
        type: string
        example: joko.binangun@gmail.com
      mobile:
        type: string
        example: 085235375985
      adress:
        type: string
        example: Jl. Merdeka No.12
      picture:
        type: string
        example: image/joko.png
     xml:
      name: WorkerUpdate
##
    WorkerGetOne:
     type: object
     properties:
      id:
       type: integer
       example: 1
      username:
       type: string
       example: joko999
      nama:
        type: string
        example: Joko Waluyo
      skills:
        type: array
        items:
            type: string
            example: ["Service AC","Plumber","Decoration"]
      email:
        type: string
        example: joko.binangun@gmail.com
      mobile:
        type: string
        example: 085235375985
      adress:
        type: string
        example: Jl. Merdeka No.12
      picture:
        type: string
        example: image/joko.png
      project_history:
        type: array
        items: 
          type: object
          $ref: '#/components/schemas/ProjectHistory'
      client_review:
        type: array
        items: 
          type: object
          $ref: '#/components/schemas/ClientReview'
     xml:
      name: WorkerGetOne
      ##
    ClientReview:
      type: object
      properties:
        username:
          type: string
          example: andi123
        review:
          type: string
          example: Kerjanya bagus, cepat, dan rapi!
        created_at:
          type: string
          example: 2023-10-30 09:36:33.596
      xml:
        name: ClientReview
      ##
    ProjectHistory:
      type: object
      properties:
        job_id:
          type: integer
          example: 1
        job_category:
          type: string
          example: Plumber
        created_at:
          type: string
          example: 2023-10-30 09:36:33.596
      xml:
        name: ProjectHistory
      ##
    Workers:
      type: object
      properties:
        id:
         type: integer
         example: 1
        username:
         type: string
         example: joko999
        nama:
          type: string
          example: Joko Waluyo
        skills:
          type: array
          items:
              type: string
              example: ["Service AC","Plumber","Decoration"]
        rate:
          type: string
          example: Rp150.000,00
        adress:
          type: string
          example: Jl. Merdeka No.12
        picture:
          type: string
          example: image/joko.png
      xml:
        name: Workers
    PaginatedResultWorker:
      type: object
      properties:
        has_next: { type: boolean, example: false }
        has_prev: { type: boolean, example: true }
        page: { type: number, example: 1 }
        pages: { type: number, example: 2 }
        per_page: { type: number, example: 10 }
        total: { type: number, example: 18 }
        results: { type: array, items: {} }
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
    tukangku_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
