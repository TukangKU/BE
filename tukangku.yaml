openapi: 3.0.0
info:
  description: |
    This is a sample Sosmed server.
  version: "1.0.0"
  title: TukangKu
  contact:
    email: mhafidz.hidayat@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/be-tukangku/tukangku/1.0.0
  - url: "https://petstore.swagger.io/v2"
tags:
  - name: Auth
    description: login client and pekerja
  - name: Clients
    description: Operations about Client
  - name: Workers
    description: Operations about Worker
  - name: Skill
    description: skills of worker 
  - name: Jobs
    description: Jobs operations
  - name: Transactions


paths:

  /register:
    post:
      tags:
        - Auth
      summary: "Register"
      requestBody:
        $ref: "#/components/requestBodies/register"
      responses:
        "201":
          description: register successful
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "register successful"
                  data:
          
                    role: "worker"
                    username: "bedul1"
                    email: "bedul@gmail.com"
        "400":
          $ref: "#/components/responses/400"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"


  /login:
    post:
      tags:
        - Auth
      summary: "Login"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginReq"
      responses:
        "201":
          description: login successful
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "login successful"
                  data:
                    id: 1
                    username: "bedul1"
                    email: "bedul@gmail.com"
                    role: "worker"
                    token: "ierwiehfsdfsnewoueyrwygejkdbfsejhsbdjbfse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"

#client

  /clients/{id}:
    get:
      tags:
        - Clients
      summary: Get clients by id
      description: This can only be done by the logged in user.
      operationId: getCliensById
      parameters:
        - name: id
          in: path
          description: 'The id that needs to be fetched. Use 2 for testing. '
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success response
          content:
            application/json:
              example:
                message: "success"
                data:
                  id: 2
                  username: "joko999"
                  nama: "Joko Waluyo"
                  email: "joko.binangun@gmail.com"
                  nohp: "085235375985"
                  alamat: "Jl. Merdeka No.12"
                  foto: "/image/user/foto2.png"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - Clients
      summary: "Update client by client_id"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 2
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/updateClient"
      responses:
        "200":
          description: "update user successful"
          content:
            application/json:
              example:
                message: "update user successful"
                data:
                  id: 2
                  username: "joko999"
                  nama: "Joko Waluyo"
                  email: "joko.binangun@gmail.com"
                  nohp: "085235375985"
                  alamat: "Jl. Merdeka No.12"
                  foto: "/image/user/foto2.png"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"

   

# worker


  /workers/{id}:
    get:
      tags:
        - Workers
      summary: Get worker by id
      description: This can only be done by the logged in user.
      operationId: getWorkerById
      parameters:
        - name: id
          in: path
          description: 'The id that needs to be fetched. Use 1 for testing. '
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: success response
          content:
            application/json:
              example:
                message: "success"
                data:
                  id: 1
                  username: "bedul1"
                  nama: "Bedul Markedul"
                  email: "bedulganteng@gmail.com"
                  nohp: "0898456123745"
                  alamat: "Jl. Aja Dulu"
                  skill: 
                    - skill_id: 1
                      skill_name: "Service AC"
                    - skill_id: 2
                      skill_name: "Cleaning"    
                    - skill_id: 3
                      skill_name: "Plumber"           
                  foto: "/image/user/foto2.png"
                  project_history: 
                    - category: "Service AC"
                      harga: 300000
                    - category: "Cleaning"
                      harga: 150000
                    - category: "Plumber"
                      harga: 175000
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - Workers
      summary: "Update worker by worker_id"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          example: 1
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/updateWorker"
      responses:
        "200":
          description: "update user successful"
          content:
            application/json:
              example:
                message: "update user successful"
                data:
                  id: 1
                  username: "bedul1"
                  nama: "Bedul Markedul"
                  email: "bedulganteng@gmail.com"
                  nohp: "0898456123745"
                  alamat: "Jl. Aja Dulu"
                  skill: 
                    - skill_id: 1
                      skill_name: "Service AC"
                    - skill_id: 2
                      skill_name: "Cleaning"    
                    - skill_id: 3
                      skill_name: "Plumber"           
                  foto: "/image/user/foto2.png"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"


  /workers:
    get:
      tags:
        - Workers
      summary: get worker by skill 
      parameters:
        - in: query
          name: skill
          required: true
          schema: 
            type: integer
          example: 1
        - in: query
          name: page
          required: false
          schema: 
            type: integer
          example: 1
      security:
        - bearerAuth: []
      responses:
        "200":
          description: get worker by skill 
          content:
            application/json:
              schema: 
                type: object
                example:
                  message: "get worker by skill"
                  data: [{
                    id: 1,
                    nama: "Bedul Markedul",
                    alamat: "jln. aja dulu",
                    total_project: 2,
                    skill: [
                     {skill_id: 1,
                      skill_name: "Service AC",},
                      {skill_id: 2,
                      skill_name: "Cleaning",}],
                    },
                    {
                    id: 3,
                    nama: "Robert J Openheimer",
                    alamat: "Jl. Manhattan Project",
                    total_project: 2,
                    skill: [
                      {skill_id: 1,
                      skill_name: "Service AC",},
                      {skill_id: 5,
                      skill_name: "CCTV",},],
                    },
                      ]
                  pagination:
                    page: 1
                    pagesize: 10
                    totalpages: 1
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"










# skill

  /skills:

    get:
      tags:
        - Skill 
      summary: "get all skills" 
      security:
        - bearerAuth: []
      responses:      
        "200":
          description: get all skills 
          content:
            application/json:
              schema: 
                type: object
                example:
                  message: "get all skills successful"
                  data: 
                  - skill_id: 1
                    skill_name: "Service AC" 
                  - skill_id: 2
                    skill_name: "Cleaning" 
                  - skill_id: 3
                    skill_name: "Plumber" 
                  - skill_id: 4
                    skill_name: "Decoration" 
                  - skill_id: 5
                    skill_name: "CCTV" 
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"


##Jobs
  /jobs:

    post: 
      tags:
        - Jobs
      summary: "create Job Request"
      requestBody:
          $ref: "#/components/requestBodies/addJobDetail"
      security:
        - bearerAuth: []
      responses:
        "201":
          description: "create job detail" 
          content:
            application/json:
              schema: 
                type: object
                example: 
                  message: "Job request created!" 
                  data: 
                    job_id: 1
                    foto: "/image/user/foto2.png"
                    worker_name: "Bedul Markedul"
                    nohp: "08212211123"
                    category: "Service AC"
                    start_date: "2023-12-14"
                    end_date: "2023-12-15"
                    harga: 0
                    deskripsi: "Sy mau pasang AC baru untuk satu kamar" 
                    status: "pending"
                    alamat: "Jl. Bersama"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"

    get:
      tags:
        - Jobs
      summary: "get all jobs by user_id, could be filtered by status" 
      parameters:
        - in: query
          name: status 
          required: false
          schema: 
            type: string
          example: "accepted"
        - in: query
          name: page
          required: false
          schema: 
            type: integer
          example: 1
      security:
        - bearerAuth: [] 
      responses:
        "200": 
          description: "get all job by status" 
          content:
            application/json:
              schema: 
                type: object
                example:
                  message: "get all job by status" 
                  data: 
                  - job_id: 10
                    worker_name: "bedul"
                    client_name: "Peter Jordanson"
                    start_date: "2023-12-15"
                    end_date: "2023-12-16"
                    harga: 300000
                    category: "Service AC"
                    status: "accepted"
                  - job_id: 9
                    worker_name: "jaya wijaya"
                    client_name: "Peter Jordanson"
                    start_date: "2023-12-15"
                    end_date: "2023-12-16"
                    harga: 175000
                    category: "Plumber"
                    status: "accepted"

                  pagination:
                    page: 1
                    pagesize: 10
                    totalpages: 1
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"

  /jobs/{id}:
    get:
      tags:
        - Jobs
      summary: "get job by jobs_id" 
      parameters:
        - in: path
          name: id 
          required: true
          schema: 
            type: integer
          example: 1
      security:
        - bearerAuth: [] 
      responses:
        "200": 
          description: "get a job by id" 
          content:
            application/json:
              schema: 
                type: object
                example:
                  message: "success" 
                  data: 
                    job_id: 1
                    category: "Service AC"
                    worker_name: "bedul"
                    client_name: "Peter Jordanson"
                    foto: "/image/user/foto2.png"
                    nohp: "085234555321"
                    start_date: "2023-12-15"
                    end_date: "2023-12-16"
                    alamat: "Jl. Setiabudi"
                    harga: 0
                    deskripsi: "Mau pasang AC 2 mas"
                    note_negosiasi: "" 
                    status: "pending"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"
    put: 
      tags:
        - Jobs
      summary: "this operation enables negotiations between worker and client"
      parameters:
        - in: path
          name: id 
          required: true
          schema: 
            type: integer
          example: 1
      requestBody:
          $ref: "#/components/requestBodies/putJobReq"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "success" 
          content:
            application/json:
              schema: 
                type: object
                example: 
                  message: "success" 
                  data: 
                    job_id: 1
                    category: "Service AC"
                    worker_name: "bedul"
                    client_name: "Peter Jordanson"
                    foto: "/image/user/foto2.png"
                    nohp: "08212211123"
                    start_date: "2023-12-15"
                    end_date: "2023-12-16"
                    alamat: "Jl. Setiabudi"
                    harga: 300000
                    deskripsi: "Mau pasang AC 2 mas"
                    note_negosiasi: "boleh mas" 
                    status: "negotiation"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "405":
          $ref: "#/components/responses/405"
        "500":
          $ref: "#/components/responses/500"
  # /takeworker/{id}:
    
  #   get:
  #     tags:
  #       - Jobs
  #     summary: "get worker by id, for request jobs" 
  #     parameters:
  #       - in: path
  #         name: id 
  #         required: true
  #         schema: 
  #           type: integer
  #         example: 1
  #     security:
  #       - bearerAuth: [] 
  #     responses:
  #       "200": 
  #         description: "success" 
  #         content:
  #           application/json:
  #             schema: 
  #               type: object
  #               example:
  #                 message: "success get data by id" 
  #                 data: 
  #                   id: 1
  #                   username: "test1"
  #                   nama: "Bedul Markedul"
  #                   email: "test1@gmail.com"
  #                   nohp: "085235375985"
  #                   alamat: "jln. aja dulu"
  #                   skill: [
  #                    {skill_id: 1,
  #                     skill_name: "Service AC",},
  #                     {skill_id: 2,
  #                     skill_name: "Cleaning",}]
  #                   jobhistory: [
  #                     {worker_id: 1,
  #                      client_id: 2,
  #                      category: "Service AC",
  #                      price: 150000,
  #                      deskripsi: "Mau pasang AC Toshiba",
  #                      status: "accepted"
  #                     },
  #                     {worker_id: 1,
  #                      client_id: 3,
  #                      category: "Plumber",
  #                      price: 150000,
  #                      deskripsi: "drainase saya tersumbat",
  #                      status: "accepted",
  #                     },
  #                     {worker_id: 1,
  #                      client_id: 2,
  #                      category: "Plumber",
  #                      price: 150000,
  #                      deskripsi: "ada masalah sama saluran ke wastafel mas",
  #                      status: "accepted",
  #                     }
  #                     ]
  #                   total_job: 3
  #       "400":
  #         $ref: "#/components/responses/400"
  #       "401":
  #         $ref: "#/components/responses/401"
  #       "404":
  #         $ref: "#/components/responses/404"
  #       "405":
  #         $ref: "#/components/responses/405"
  #       "500":
  #         $ref: "#/components/responses/500"
    
  /transactions:
    post:
          tags:
            - Transactions
          summary: "Make a payment for a transaction" 
          requestBody:
           $ref: "#/components/requestBodies/postTransasction"
          security:
            - bearerAuth: [] 
          responses:
           "201":
            description: "create job detail" 
            content:
              application/json:
                schema: 
                  type: object
                  example: 
                    message: "Transaction created!" 
                    data: 
                      url: "https://app.sandbox.midtrans.com/snap/v3/redirection/e8971e31-f63d-4ded-a738-c8835b97d357"
           "400":
              $ref: "#/components/responses/400"
           "401":
              $ref: "#/components/responses/401"
           "404":
              $ref: "#/components/responses/404"
           "405":
              $ref: "#/components/responses/405"
           "500":
              $ref: "#/components/responses/500"



components:
  schemas:
    loginReq:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: bedul1@gmail.com
        password: bedulganteng

    registerReq:
      type: object
      required:
        - "username"
        - "email"
        - "password"
        - "role"
      properties:
        username:
          type: string
          example: "bedul1"
        email:
          type: string
          example: "bedul@gmail.com"
        password:
          type: string
          example: "bedulganteng"
        role:
          type: string
          enum:
            - worker
            - client

    clientUpdateReq:
      type: object
      properties:
        username:
          type: string
        nama:
          type: string
        email:
          type: string
        nohp:
          type: string
        alamat:
          type: string
        foto:
          type: string
          format: binary

    workerUpdateReq:
      type: object
      properties:
        username:
          type: string
        nama:
          type: string
        skill:
          type: array
          items:
            type: integer
        email:
          type: string
        nohp:
          type: string
        alamat:
          type: string
        foto:
          type: string
          format: binary


    addSkillReq:
      type: object
      required:
        - "skill_name"
        - "harga"
      properties:
        skill_name:
          type: string
          example: "service ac"


    addJobDetailReq:
      type: object
      properties:
        worker_id:
          type: integer
        skill_id:
          type: integer
        start_date:
          type: string
          format: date
        end_date: 
          type: string
          format: date
        alamat:
          type: string
        deskripsi: 
          type: string


    putJobReq:
      type: object
      properties:
        note_negosiasi:
          type: string
        harga:
          type: integer
          example: 300000
        status: 
          type: string  

    postTransasction:
      type: object
      properties:
        job_id:
          type: integer
        job_harga:
          type: integer
          example: 300000

  requestBodies:
    register:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/registerReq"

    updateClient:
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/clientUpdateReq"

    updateWorker:
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/workerUpdateReq"

    addSkill:
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/addSkillReq"

    addJobDetail: 
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/addJobDetailReq"

    putJobReq:
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/putJobReq"

    postTransasction:  
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/postTransasction"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    "400":
      description: "bad request"
      content:
        application/json:
          example:
            message: "bad request"
    "401":
      description: "unauthorized"
      content:
        application/json:
          example:
            message: "unauthorized"
    "404":
      description: "not found"
      content:
        application/json:
          example:
            message: "not found"
    "405":
      description: "method not allowed"
      content:
        application/json:
          example:
            message: "method not allowed"
    "500":
      description: "internal server error"
      content:
        application/json:
          example:
            message: "internal server error"