// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	users "tukangku/features/users"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetUserByID provides a mock function with given fields: idUser
func (_m *Repository) GetUserByID(idUser uint) (users.Users, error) {
	ret := _m.Called(idUser)

	var r0 users.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (users.Users, error)); ok {
		return rf(idUser)
	}
	if rf, ok := ret.Get(0).(func(uint) users.Users); ok {
		r0 = rf(idUser)
	} else {
		r0 = ret.Get(0).(users.Users)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBySKill provides a mock function with given fields: idSkill, page, pageSize
func (_m *Repository) GetUserBySKill(idSkill uint, page int, pageSize int) ([]users.Users, int, error) {
	ret := _m.Called(idSkill, page, pageSize)

	var r0 []users.Users
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]users.Users, int, error)); ok {
		return rf(idSkill, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []users.Users); ok {
		r0 = rf(idSkill, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) int); ok {
		r1 = rf(idSkill, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(uint, int, int) error); ok {
		r2 = rf(idSkill, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Login provides a mock function with given fields: email
func (_m *Repository) Login(email string) (users.Users, error) {
	ret := _m.Called(email)

	var r0 users.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (users.Users, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) users.Users); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(users.Users)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newUser
func (_m *Repository) Register(newUser users.Users) (users.Users, error) {
	ret := _m.Called(newUser)

	var r0 users.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(users.Users) (users.Users, error)); ok {
		return rf(newUser)
	}
	if rf, ok := ret.Get(0).(func(users.Users) users.Users); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(users.Users)
	}

	if rf, ok := ret.Get(1).(func(users.Users) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakeWorker provides a mock function with given fields: idUser
func (_m *Repository) TakeWorker(idUser uint) (users.Users, error) {
	ret := _m.Called(idUser)

	var r0 users.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (users.Users, error)); ok {
		return rf(idUser)
	}
	if rf, ok := ret.Get(0).(func(uint) users.Users); ok {
		r0 = rf(idUser)
	} else {
		r0 = ret.Get(0).(users.Users)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: idUser, updateWorker
func (_m *Repository) UpdateUser(idUser uint, updateWorker users.Users) (users.Users, error) {
	ret := _m.Called(idUser, updateWorker)

	var r0 users.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, users.Users) (users.Users, error)); ok {
		return rf(idUser, updateWorker)
	}
	if rf, ok := ret.Get(0).(func(uint, users.Users) users.Users); ok {
		r0 = rf(idUser, updateWorker)
	} else {
		r0 = ret.Get(0).(users.Users)
	}

	if rf, ok := ret.Get(1).(func(uint, users.Users) error); ok {
		r1 = rf(idUser, updateWorker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
