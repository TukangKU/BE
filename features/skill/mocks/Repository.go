// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	skill "tukangku/features/skill"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddSkill provides a mock function with given fields: newSkill
func (_m *Repository) AddSkill(newSkill skill.Skills) (skill.Skills, error) {
	ret := _m.Called(newSkill)

	var r0 skill.Skills
	var r1 error
	if rf, ok := ret.Get(0).(func(skill.Skills) (skill.Skills, error)); ok {
		return rf(newSkill)
	}
	if rf, ok := ret.Get(0).(func(skill.Skills) skill.Skills); ok {
		r0 = rf(newSkill)
	} else {
		r0 = ret.Get(0).(skill.Skills)
	}

	if rf, ok := ret.Get(1).(func(skill.Skills) error); ok {
		r1 = rf(newSkill)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowSkill provides a mock function with given fields:
func (_m *Repository) ShowSkill() ([]skill.Skills, error) {
	ret := _m.Called()

	var r0 []skill.Skills
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]skill.Skills, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []skill.Skills); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]skill.Skills)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
